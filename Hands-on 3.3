import ply.lex as lex
import ply.yacc as yacc

# Analizador Léxico
tokens = (
    'NUMBER', 'BOOLEAN',
    'PLUS', 'MINUS', 'TIMES', 'DIVIDE',
    'LPAREN', 'RPAREN', 'AND', 'OR', 'NOT'
)

t_PLUS = r'\+'
t_MINUS = r'-'
t_TIMES = r'\*'
t_DIVIDE = r'/'
t_LPAREN = r'\('
t_RPAREN = r'\)'
t_AND = r'AND'
t_OR = r'OR'
t_NOT = r'NOT'

def t_BOOLEAN(t):
    r'true|false|0|1'
    t.value = True if t.value in ('true', '1') else False
    return t

def t_NUMBER(t):
    r'\d+'
    t.value = int(t.value)
    return t

t_ignore = ' \t'

def t_error(t):
    print(f"Carácter inválido: {t.value[0]}")
    t.lexer.skip(1)

# Analizador Sintáctico
precedence = (
    ('left', 'AND', 'OR'),
    ('left', 'PLUS', 'MINUS'),
    ('left', 'TIMES', 'DIVIDE'),
    ('right', 'NOT', 'UMINUS'),
)

def p_input(p):
    '''input : expr'''
    print("Expresión válida")

def p_expr(p):
    '''
    expr : expr PLUS expr
         | expr MINUS expr
         | expr TIMES expr
         | expr DIVIDE expr
         | expr AND expr
         | expr OR expr
         | NOT expr
         | MINUS expr %prec UMINUS
         | LPAREN expr RPAREN
         | NUMBER
         | BOOLEAN
    '''
    pass

def p_error(p):
    print("Expresión inválida")

lexer = lex.lex()
parser = yacc.yacc()

if __name__ == "__main__":
    while True:
        try:
            s = input("> ")
        except EOFError:
            break
        parser.parse(s)
